using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using DataLayer;
using System.ComponentModel;
using System.Collections.ObjectModel;
using System.Windows.Threading;
using System;
using System.Data;
using Wpf_Linq.Reports;
using system.windows;

namespace Wpf_Linq
{
    /// <summary>
    /// Interaction logic for ucTimKiem.xaml
    /// </summary>
    public partial class ucTimKiem : UserControl
    {
        HokhauDataContext hKDataContext = new HokhauDataContext(windowMain.connectionString);
        string strTim;
        CollectionViewSource thongTinHOKHAUViewSource;
        CollectionViewSource chuyenHOKHAUViewSource;
        CollectionViewSource catHOKHAUViewSource;
        ObservableCollection<clsHoKhauTemp> HoKhaus;
        ObservableCollection<HOKHAULUU> HoKhausChuyen;
        ObservableCollection<HOKHAULUU> HoKhausCat;
        short search;
        private int countItems = 0;
        private bool isDisableNavigator = false;

        public ucTimKiem()
        {
            InitializeComponent();
            thongTinHOKHAUViewSource = ((CollectionViewSource)(this.FindResource("thongTinHOKHAUViewSource")));
            chuyenHOKHAUViewSource = ((CollectionViewSource)(this.FindResource("chuyenHOKHAUViewSource")));
            catHOKHAUViewSource = ((CollectionViewSource)(this.FindResource("catHOKHAUViewSource")));
            rbnThongTinHoKhau.Checked += new RoutedEventHandler(rbnThongTinHoKhau_Checked);
            rbnChuyenHoKhau.Checked += new RoutedEventHandler(rbnChuyenHoKhau_Checked);
            rbnCatHoKhau.Checked += new RoutedEventHandler(rbnCatHoKhau_Checked);
            rbnTimTatCa.Checked += new RoutedEventHandler(rbnTimTatCa_Checked);
            rbnTimDiaChi.Checked += new RoutedEventHandler(rbnTimDiaChi_Checked);
            rbnTimSoHoKhau.Checked += new RoutedEventHandler(rbnTimSoHoKhau_Checked);
        }

        #region Navigator
        private void btnForward_Click(object sender, RoutedEventArgs e)
        {
            if (thongTinHOKHAUViewSource.Source != null)
            {
                thongTinHOKHAUViewSource.View.MoveCurrentToNext();
                return;
            }
            else if (chuyenHOKHAUViewSource.Source != null)
            {
                chuyenHOKHAUViewSource.View.MoveCurrentToNext();
                return;
            }
            else if (catHOKHAUViewSource.Source != null)
            {
                catHOKHAUViewSource.View.MoveCurrentToNext();
                return;
            }
        }

        private void btnBack_Click(object sender, RoutedEventArgs e)
        {
            if (thongTinHOKHAUViewSource.Source != null)
            {
                thongTinHOKHAUViewSource.View.MoveCurrentToPrevious();
                return;
            }
            else if (chuyenHOKHAUViewSource.Source != null)
            {
                chuyenHOKHAUViewSource.View.MoveCurrentToPrevious();
                return;
            }
            else if (catHOKHAUViewSource.Source != null)
            {
                catHOKHAUViewSource.View.MoveCurrentToPrevious();
                return;
            }
        }

        private void btnFirst_Click(object sender, RoutedEventArgs e)
        {
            if (thongTinHOKHAUViewSource.Source != null)
            {
                thongTinHOKHAUViewSource.View.MoveCurrentToFirst();
                return;
            }
            else if (chuyenHOKHAUViewSource.Source != null)
            {
                chuyenHOKHAUViewSource.View.MoveCurrentToFirst();
                return;
            }
            else if (catHOKHAUViewSource.Source != null)
            {
                catHOKHAUViewSource.View.MoveCurrentToFirst();
                return;
            }
        }

        private void btnLast_Click(object sender, RoutedEventArgs e)
        {
            if (thongTinHOKHAUViewSource.Source != null)
            {
                thongTinHOKHAUViewSource.View.MoveCurrentToLast();
                return;
            }
            else if (chuyenHOKHAUViewSource.Source != null)
            {
                chuyenHOKHAUViewSource.View.MoveCurrentToLast();
                return;
            }
            else if (catHOKHAUViewSource.Source != null)
            {
                catHOKHAUViewSource.View.MoveCurrentToLast();
                return;
            }
        }
        #endregion

        private void btnInChiTiet_Click(object sender, RoutedEventArgs e)
        {
            Progress pg = new Progress();
            pg.Title = "?ang x? lý ... (^_^)";
            pg.IsBusy = true;
            myGridTimKiemHoKhau.Children.Add(pg);

            if (rbnThongTinHoKhau.IsChecked == true)
                search = 123;
            else if (rbnChuyenHoKhau.IsChecked == true)
                search = 456;
            else if (rbnCatHoKhau.IsChecked == true)
                search = 789;

            BackgroundWorker loadWorker = new BackgroundWorker();
            loadWorker.DoWork += new DoWorkEventHandler(loadWorker_DoWork_Main);
            loadWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(loadWorker_RunWorkerCompleted_Main);
            loadWorker.RunWorkerAsync();
        }
        
        #region In
        void loadWorker_DoWork_Main(object sender, DoWorkEventArgs e)
        {
            if (search == 123)
            {
                DataTable t = new DataTable();
                t.Columns.Add("SOHK", Type.GetType("System.String"));
                t.Columns.Add("SONHA", Type.GetType("System.String"));
                t.Columns.Add("TENDUONG", Type.GetType("System.String"));
                t.Columns.Add("PHUONGXA", Type.GetType("System.String"));
                t.Columns.Add("QUANHUYEN", Type.GetType("System.String"));
                t.Columns.Add("TINHTHANHPHO", Type.GetType("System.String"));

                DataRow r;
                for (int i = 0; i < HoKhaus.Count; i++)
                {
                    r = t.NewRow();
                    r["SOHK"] = HoKhaus[i].SoHoKhau;
                    r["SONHA"] = HoKhaus[i].SoNha;
                    r["TENDUONG"] = HoKhaus[i].TenDuong;
                    r["PHUONGXA"] = HoKhaus[i].PhuongXa;
                    r["QUANHUYEN"] = HoKhaus[i].QuanHuyen;
                    r["TINHTHANHPHO"] = HoKhaus[i].TinhTP;

                    t.Rows.Add(r);
                }

                CryRe_TK_HK_TTHK objRpt = new CryRe_TK_HK_TTHK();
                objRpt.SetDataSource(t);
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    windowReportView reportviewer = new windowReportView();
                    reportviewer.rptViewer.ReportSource = objRpt;
                    reportviewer.rptViewer.Refresh();
                    reportviewer.Show();
                }));
            }
            else if (search == 456)
            {
                DataTable t = new DataTable();
                t.Columns.Add("SOHKCDI", Type.GetType("System.String"));
                t.Columns.Add("DCCDI", Type.GetType("System.String"));
                t.Columns.Add("SOHKCDEN", Type.GetType("System.String"));
                t.Columns.Add("DCCDEN", Type.GetType("System.String"));
                t.Columns.Add("NGUOIKYTEN", Type.GetType("System.String"));
                t.Columns.Add("LYDO", Type.GetType("System.String"));
                t.Columns.Add("NGAYCDI", Type.GetType("System.String"));

                DataRow r;
                for (int i = 0; i < HoKhausChuyen.Count; i++)
                {
                    r = t.NewRow();
                    r["SOHKCDI"] = HoKhausChuyen[i].SOHK;
                    r["DCCDI"] = HoKhausChuyen[i].SONHA + ' ' + HoKhausChuyen[i].DUONG + ' ' + HoKhausChuyen[i].PHUONGXA + ' ' + HoKhausChuyen[i].QUANHUYEN + ' ' + HoKhausChuyen[i].TINHTP;
                    r["SOHKCDEN"] = HoKhausChuyen[i].SOHOSO;
                    r["DCCDEN"] = HoKhausChuyen[i].NOICHUYENDEN;
                    r["NGUOIKYTEN"] = HoKhausChuyen[i].HOTENNGUOIKYHS;
                    r["LYDO"] = HoKhausChuyen[i].LYDO;
                    r["NGAYCDI"] = HoKhausChuyen[i].NGAYCC.Value.ToShortDateString();

                    t.Rows.Add(r);
                }

                CryRe_TK_HK_CHHK objRpt = new CryRe_TK_HK_CHHK();
                objRpt.SetDataSource(t);
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    windowReportView reportviewer = new windowReportView();
                    reportviewer.rptViewer.ReportSource = objRpt;
                    reportviewer.rptViewer.Refresh();
                    reportviewer.Show();
                }));
            }
            else if (search == 789)
            {
                DataTable t = new DataTable();
                t.Columns.Add("SOHK", Type.GetType("System.String"));
                t.Columns.Add("DC", Type.GetType("System.String"));
                t.Columns.Add("NGUOIKYTEN", Type.GetType("System.String"));
                t.Columns.Add("LYDO", Type.GetType("System.String"));
                t.Columns.Add("NGAYCAT", Type.GetType("System.String"));

                DataRow r;
                for (int i = 0; i < HoKhausCat.Count; i++)
                {
                    r = t.NewRow();
                    r["SOHK"] = HoKhausCat[i].SOHK;
                    r["DC"] = HoKhausCat[i].SONHA + ' ' + HoKhausCat[i].DUONG + ' ' + HoKhausCat[i].PHUONGXA + ' ' + HoKhausCat[i].QUANHUYEN + ' ' + HoKhausCat[i].TINHTP;
                    r["NGUOIKYTEN"] = HoKhausCat[i].HOTENNGUOIKYHS;
                    r["LYDO"] = HoKhausCat[i].LYDO;
                    r["NGAYCAT"] = HoKhausCat[i].NGAYCC.Value.ToShortDateString();

                    t.Rows.Add(r);
                }

                CryRe_TK_HK_CHK objRpt = new CryRe_TK_HK_CHK();
                objRpt.SetDataSource(t);
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    windowReportView reportviewer = new windowReportView();
                    reportviewer.rptViewer.ReportSource = objRpt;
                    reportviewer.rptViewer.Refresh();
                    reportviewer.Show();
                }));
            }
        }
        #endregion

        void loadWorker_RunWorkerCompleted_Main(object sender, RunWorkerCompletedEventArgs e)
        {
            myGridTimKiemHoKhau.Children.RemoveAt(1);
        }

        private void timKiem(object sender, RoutedEventArgs e)
        {
            Progress pg = new Progress();
            pg.Title = "?ang t?i d? li?u ... (^_^)";
            pg.IsBusy = true;
            myGrid.Children.Add(pg);

            strTim = txtTimKiem.Text;
            enable_1(false);
            enable_2(false);
            isDisableNavigator = true;
            btnInChiTiet.IsEnabled = false;

            if (rbnThongTinHoKhau.IsChecked == true)
            {
                if (rbnTimTatCa.IsChecked == true)
                    search = 1;
                else if (rbnTimSoHoKhau.IsChecked == true)
                    search = 2;
                else if (rbnTimDiaChi.IsChecked == true)
                    search = 3;
            }
            else if (rbnChuyenHoKhau.IsChecked == true)
            {
                if (rbnTimTatCa.IsChecked == true)
                    search = 4;
                else if (rbnTimSoHoKhau.IsChecked == true)
                    search = 5;
                else if (rbnTimDiaChi.IsChecked == true)
                    search = 6;
            }
            else if (rbnCatHoKhau.IsChecked == true)
            {
                if (rbnTimTatCa.IsChecked == true)
                    search = 7;
                else if (rbnTimSoHoKhau.IsChecked == true)
                    search = 8;
                else if (rbnTimDiaChi.IsChecked == true)
                    search = 9;
            }

            BackgroundWorker loadWorker = new BackgroundWorker();
            loadWorker.DoWork += new DoWorkEventHandler(loadWorker_DoWork);
            loadWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(loadWorker_RunWorkerCompleted);
            loadWorker.RunWorkerAsync();
        }

        #region search
        void loadWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            nulll();
            Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
            {
                nulll_2();
            }));
            if (strTim == string.Empty)
            {
                return;
            }
            if (search == 1)
            {
                var query = from hk in hKDataContext.HOKHAUs    //  << Query does
                            select new clsHoKhauTemp            //  << not execute
                            {                                   //  << here
                                SoHoKhau = hk.SOHK,
                                SoNha = hk.SONHA,
                                TenDuong = hk.DUONG,
                                PhuongXa = hk.PHUONGXA,
                                QuanHuyen = hk.QUANHUYEN,
                                TinhTP = hk.TINHTP,
                                TinhTrang = hk.TINHTRANG1.LOAITT,
                                ChiTiet = null
                            };
                try
                {
                    HoKhaus = new ObservableCollection<clsHoKhauTemp>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhaus.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    thongTinHOKHAUViewSource.Source = HoKhaus;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexThongTinHoKhau_TextChanged(null, null);
                    txtCurrentIndexThongTinHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 2)
            {
                var query = from hk in hKDataContext.HOKHAUs    //  << Query does
                            where hk.SOHK.Contains(strTim)
                            select new clsHoKhauTemp            //  << not execute
                            {                                   //  << here
                                SoHoKhau = hk.SOHK,
                                SoNha = hk.SONHA,
                                TenDuong = hk.DUONG,
                                PhuongXa = hk.PHUONGXA,
                                QuanHuyen = hk.QUANHUYEN,
                                TinhTP = hk.TINHTP,
                                TinhTrang = hk.TINHTRANG1.LOAITT,
                                ChiTiet = null
                            };
                try
                {
                    HoKhaus = new ObservableCollection<clsHoKhauTemp>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhaus.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    thongTinHOKHAUViewSource.Source = HoKhaus;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexThongTinHoKhau_TextChanged(null, null);
                    txtCurrentIndexThongTinHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 3)
            {
                var query = from hk in hKDataContext.HOKHAUs    //  << Query does
                            where (hk.SONHA + ' ' + hk.DUONG + ' ' + hk.PHUONGXA + ' ' + hk.QUANHUYEN + ' ' + hk.TINHTP).Contains(strTim)
                            select new clsHoKhauTemp            //  << not execute
                            {                                   //  << here
                                SoHoKhau = hk.SOHK,
                                SoNha = hk.SONHA,
                                TenDuong = hk.DUONG,
                                PhuongXa = hk.PHUONGXA,
                                QuanHuyen = hk.QUANHUYEN,
                                TinhTP = hk.TINHTP,
                                TinhTrang = hk.TINHTRANG1.LOAITT,
                                ChiTiet = null
                            };
                try
                {
                    HoKhaus = new ObservableCollection<clsHoKhauTemp>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhaus.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    thongTinHOKHAUViewSource.Source = HoKhaus;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexThongTinHoKhau_TextChanged(null, null);
                    txtCurrentIndexThongTinHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 4)
            {
                var query = from hk in hKDataContext.HOKHAULUUs    //  << Query does
                            where hk.SOHK != hk.SOHOSO
                            select hk;
                try
                {
                        HoKhausChuyen = new ObservableCollection<HOKHAULUU>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhausChuyen.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    chuyenHOKHAUViewSource.Source = HoKhausChuyen;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexChuyenHoKhau_TextChanged(null, null);
                    txtCurrentIndexChuyenHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 5)
            {
                var query = from hk in hKDataContext.HOKHAULUUs    //  << Query does
                            where hk.SOHK != hk.SOHOSO
                            where hk.SOHK.Contains(strTim)
                            select hk;
                try
                {
                    HoKhausChuyen = new ObservableCollection<HOKHAULUU>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhausChuyen.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    chuyenHOKHAUViewSource.Source = HoKhausChuyen;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexChuyenHoKhau_TextChanged(null, null);
                    txtCurrentIndexChuyenHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 6)
            {
                var query = from hk in hKDataContext.HOKHAULUUs    //  << Query does
                            where hk.SOHK != hk.SOHOSO
                            where (hk.SONHA + ' ' + hk.DUONG + ' ' + hk.PHUONGXA + ' ' + hk.QUANHUYEN + ' ' + hk.TINHTP).Contains(strTim)
                            select hk;
                try
                {
                    HoKhausChuyen = new ObservableCollection<HOKHAULUU>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhausChuyen.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    chuyenHOKHAUViewSource.Source = HoKhausChuyen;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexChuyenHoKhau_TextChanged(null, null);
                    txtCurrentIndexChuyenHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 7)
            {
                var query = from hk in hKDataContext.HOKHAULUUs    //  << Query does
                            where hk.SOHK == hk.SOHOSO
                            select hk;
                try
                {
                    HoKhausCat = new ObservableCollection<HOKHAULUU>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhausCat.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    catHOKHAUViewSource.Source = HoKhausCat;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexCatHoKhau_TextChanged(null, null);
                    txtCurrentIndexCatHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 8)
            {
                var query = from hk in hKDataContext.HOKHAULUUs    //  << Query does
                            where hk.SOHK == hk.SOHOSO
                            where hk.SOHK.Contains(strTim)
                            select hk;
                try
                {
                    HoKhausCat = new ObservableCollection<HOKHAULUU>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhausCat.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    catHOKHAUViewSource.Source = HoKhausCat;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexCatHoKhau_TextChanged(null, null);
                    txtCurrentIndexCatHoKhau.IsEnabled = true;
                }));
            }
            else if (search == 9)
            {
                var query = from hk in hKDataContext.HOKHAULUUs    //  << Query does
                            where hk.SOHK == hk.SOHOSO
                            where (hk.SONHA + ' ' + hk.DUONG + ' ' + hk.PHUONGXA + ' ' + hk.QUANHUYEN + ' ' + hk.TINHTP).Contains(strTim)
                            select hk;
                try
                {
                    HoKhausCat = new ObservableCollection<HOKHAULUU>(query);
                }
                catch
                {
                    MessageBox.Show("Không tìm th?y máy ch? ! Vui lòng thay ??i chu?i k?t n?i ... T__T", "", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                countItems = HoKhausCat.Count();
                Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate()
                {
                    catHOKHAUViewSource.Source = HoKhausCat;
                    txtItemCount.Text = "/" + countItems.ToString();
                    txtCurrentIndexCatHoKhau_TextChanged(null, null);
                    txtCurrentIndexCatHoKhau.IsEnabled = true;
                }));
            }
        }
        #endregion

        void loadWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            myGrid.Children.RemoveAt(3);
            if (HoKhaus.Count == 0 && HoKhausChuyen.Count == 0 && HoKhausCat.Count == 0)
                return;
            btnInChiTiet.IsEnabled = true;
        }

        #region Tab
        private void rbnThongTinHoKhau_Checked(object sender, RoutedEventArgs e)
        {
            myGrid_1.Visibility = System.Windows.Visibility.Visible;
            myGrid_2.Visibility = System.Windows.Visibility.Hidden;
            myGrid_3.Visibility = System.Windows.Visibility.Hidden;
            txtCurrentIndexThongTinHoKhau.Visibility = System.Windows.Visibility.Visible;
            txtCurrentIndexChuyenHoKhau.Visibility = System.Windows.Visibility.Hidden;
            txtCurrentIndexCatHoKhau.Visibility = System.Windows.Visibility.Hidden;
            if (thongTinHOKHAUViewSource.Source == null)
            {
                txtCurrentIndexThongTinHoKhau.IsEnabled = false;
                btnInChiTiet.IsEnabled = false;
                txtItemCount.Text = "/0";
                enable_1(false);
                enable_2(false);
            }
            else
            {
                txtCurrentIndexThongTinHoKhau.IsEnabled = true;
                btnInChiTiet.IsEnabled = true;
                txtItemCount.Text = "/" + countItems.ToString();
                txtCurrentIndexThongTinHoKhau_TextChanged(null, null);
            }
        }

        private void rbnChuyenHoKhau_Checked(object sender, RoutedEventArgs e)
        {
            myGrid_1.Visibility = System.Windows.Visibility.Hidden;
            myGrid_2.Visibility = System.Windows.Visibility.Visible;
            myGrid_3.Visibility = System.Windows.Visibility.Hidden;
            txtCurrentIndexThongTinHoKhau.Visibility = System.Windows.Visibility.Hidden;
            txtCurrentIndexChuyenHoKhau.Visibility = System.Windows.Visibility.Visible;
            txtCurrentIndexCatHoKhau.Visibility = System.Windows.Visibility.Hidden;
            if (chuyenHOKHAUViewSource.Source == null)
            {
                txtCurrentIndexChuyenHoKhau.IsEnabled = false;
                btnInChiTiet.IsEnabled = false;
                txtItemCount.Text = "/0";
                enable_1(false);
                enable_2(false);
            }
            else
            {
                txtCurrentIndexChuyenHoKhau.IsEnabled = true;
                btnInChiTiet.IsEnabled = true;
                txtItemCount.Text = "/" + countItems.ToString();
                txtCurrentIndexChuyenHoKhau_TextChanged(null, null);
            }
        }

        private void rbnCatHoKhau_Checked(object sender, RoutedEventArgs e)
        {
            myGrid_1.Visibility = System.Windows.Visibility.Hidden;
            myGrid_2.Visibility = System.Windows.Visibility.Hidden;
            myGrid_3.Visibility = System.Windows.Visibility.Visible;
            txtCurrentIndexThongTinHoKhau.Visibility = System.Windows.Visibility.Hidden;
            txtCurrentIndexChuyenHoKhau.Visibility = System.Windows.Visibility.Hidden;
            txtCurrentIndexCatHoKhau.Visibility = System.Windows.Visibility.Visible;
            if (catHOKHAUViewSource.Source == null)
            {
                txtCurrentIndexCatHoKhau.IsEnabled = false;
                btnInChiTiet.IsEnabled = false;
                txtItemCount.Text = "/0";
                enable_1(false);
                enable_2(fals);
            }
            else
            {
                txtCurrentIndexCatHoKhau.IsEnabled = true;
                btnInChiTiet.IsEnabled = true;
                txtItemCount.Text = "/" + countItems.ToString();
                txtCurrentIndexCatHoKhau_TextChanged(null, null);
            }
        }
        #endregion

        #region "Tìm t?t c?"
        private void txtTimKiem_PreviewTextInput(object sender, System.Windows.Input.TextCompositionEventArgs e)
        {
            if (rbnTimTatCa.IsChecked == true)
                e.Handled = true;
        }

        private void rbnTimTatCa_Checked(object sender, RoutedEventArgs e)
        {
            txtTimKiem.Text = "Tìm t?t c?";
            txtTimKiem.Focus();
        }

        private void rbnTimSoHoKhau_Checked(object sender, RoutedEventArgs e)
        {
            if (txtTimKiem.Text == "Tìm t?t c?")
                txtTimKiem.Text = string.Empty;
        }

        private void rbnTimDiaChi_Checked(object sender, RoutedEventArgs e)
        {
            if (txtTimKiem.Text == "Tìm t?t c?")
                txtTimKiem.Text = string.Empty;
        }
        #endregion

        #region TextChanged
        private void txtCurrentIndexCatHoKhau_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (countItems == 0 || catHOKHAUViewSource.Source == null)
                return;
            int index;
            bool f = int.TryParse(txtCurrentIndexCatHoKhau.Text, out index);
            if (!f)
                return;
            --index;
            dataGridCatHoKhau.ScrollIntoView(HoKhausCat[index]);
            if (isDisableNavigator)
            {
                enable_1(true);
                enable_2(true);
            }
            if (index == 0)
            {
                enable_1(false);
                isDisableNavigator = true;
            }
            if (index == countItems - 1)
            {
                enable_2(false);
                isDisableNavigator = true;
            }
        }

        private void txtCurrentIndexChuyenHoKhau_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (countItems == 0 || chuyenHOKHAUViewSource.Source == null)
                return;
            int index;
            bool f = int.TryParse(txtCurrentIndexChuyenHoKhau.Text, out index);
            if (!f)
                return;
            --index;
            dataGridChuyenHoKhau.ScrollIntoView(HoKhausChuyen[index]);
            if (isDisableNavigator)
            {
                enable_1(true);
                enable_2(true);
            }
            if (index == 0)
            {
                enable_1(false);
                isDisableNavigator = true;
            }
            if (index == countItems - 1)
            {
                enable_2(false);
                isDisableNavigator = true;
            }
        }

        private void txtCurrentIndexThongTinHoKhau_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (countItems == 0 || thongTinHOKHAUViewSource.Source == null)
                return;
            int index;
            bool f = int.TryParse(txtCurrentIndexThongTinHoKhau.Text, out index);
            if (!f)
                return;
            --index;
            dataGridThongTinHoKhau.ScrollIntoView(HoKhaus[index]);
            if (isDisableNavigator)
            {
                enable_1(true);
                enable_2(true);
            }
            if (index == 0)
            {
                enable_1(false);
                isDisableNavigator = true;
            }
            if (index == countItems - 1)
            {
                enable_2(false);
                isDisableNavigator = true;
            }
        }
        #endregion

        #region nulll_2 nulll enable_1 enable_2
        private void nulll_2()
        {
            thongTinHOKHAUViewSource.Source = null;
            chuyenHOKHAUViewSource.Source = null;
            catHOKHAUViewSource.Source = null;
        }

        private void nulll()
        {
            HoKhaus = new ObservableCollection<clsHoKhauTemp>();
            HoKhausChuyen = new ObservableCollection<HOKHAULUU>();
            HoKhausCat = new ObservableCollection<HOKHAULUU>();
        }

        private void enable_1(bool f)
        {
            btnBack.IsEnabled = f;
            btnFirst.IsEnabled = f;
        }

        private void enable_2(bool f)
        {
            btnLast.IsEnabled = f;
            btnForward.IsEnabled = f;
        }
        #endregion
    }
}
dsfdgfdgdfgdf
